
1. QA_UBA
   - Descrição: Conta, Grupo ou Privilégios Modificados
   - Python: 

    ```python
    import win32evtlog

    def get_event_log(server, logtype):
        hand = win32evtlog.OpenEventLog(server, logtype)
        flags = win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ
        total = win32evtlog.GetNumberOfEventLogRecords(hand)
        events = []
        while True:
            events_data = win32evtlog.ReadEventLog(hand, flags, 0)
            if events_data:
                for event in events_data:
                    if event.EventID in [4728, 4732, 4670]:
                        events.append(event)
            else:
                break
        return events

    events = get_event_log(None, 'Security')
    for event in events:
        print(f'Event Category: {event.EventCategory}, Event ID: {event.EventID}, Event Type: {event.EventType}')
    ```

   - PowerShell: `Get-WinEvent -LogName Security | Where-Object {$_.Id -eq 4728 -or $_.Id -eq 4732 -or $_.Id -eq 4670}`

2. QA_RC308_C134_E.R_A_WIN_Detect Forged Kerberos Ticket
   - Descrição: O Usuário de Login Não é o Usuário Real
   - Python:

    ```python
    import win32evtlog

    def get_event_log(server, logtype):
        hand = win32evtlog.OpenEventLog(server, logtype)
        flags = win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ
        total = win32evtlog.GetNumberOfEventLogRecords(hand)
        events = []
        while True:
            events_data = win32evtlog.ReadEventLog(hand, flags, 0)
            if events_data:
                for event in events_data:
                    if event.EventID == 4769:
                        events.append(event)
            else:
                break
        return events

    events = get_event_log(None, 'Security')
    for event in events:
        print(f'Event Category: {event.EventCategory}, Event ID: {event.EventID}, Event Type: {event.EventType}')
    ```

   - PowerShell: `Get-WinEvent -LogName Security | Where-Object {$_.Id -eq 4769}`

3. QA_RC308_C130_E.R_A_WAF_Cross Site Scripting Strings
   - Descrição: Detectar Strings de Cross Site Scripting nos logs do WAF
   - Python: # Não há um equivalente em uma única linha
   - PowerShell: `Get-Content -Path 'C:\\path\\to\\waf\\logs' | Select-String -Pattern '<script>'`

4. QA_RC308_C131_E.R_A_WAF_SQL Injection Strings In URI
   - Descrição: Detectar Strings de Injeção SQL na URI nos logs do WAF
   - Python: # Não há um equivalente em uma única linha
   - PowerShell: `Get-Content -Path 'C:\\path\\to\\waf\\logs' | Select-String -Pattern 'SELECT .* FROM'`

5. QA_RC308_C132_E.R_M_IIS_WebServer Access Logs Deleted
   - Descrição: Logs de Acesso do Servidor Web IIS Excluídos
   - Python:

    ```python
    import os

    if not os.path.exists('C:\\inetpub\\logs\\LogFiles'):
        print('Logs excluídos')
    else:
        print('Logs existentes')
    ```

   - PowerShell: `if (-not (Test-Path 'C:\\inetpub\\logs\\LogFiles')) { Write-Output 'Logs excluídos' }`

6. QA_RC308_C119_E.R_A_IIS_Disable Windows IIS HTTP Logging
   - Descrição: Desabilitar o Logging HTTP do IIS no Windows
   - Python:

    ```python
    import os

    os.system('appcmd set config /section:httpLogging /dontLog=true')
    ```

   - PowerShell: `Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webServer/httpLogging' -name 'dontLog' -value 'true'`

7. QA_RC308_C120_E.R_M_IIS_Suspicious IIS URL GlobalRules Rewrite Via AppCmd
   - Descrição: Regras de Reescrita de URL do IIS Suspeitas Via AppCmd
   - Python: # Não há um equivalente em uma única linha
   - PowerShell: `Get-Content -Path 'C:\\path\\to\\applicationHost.config' | Select-String -Pattern '<rule name=\".*\"'`

8. QA_RC308_C116_L.E.R_A_WIN_Potential SMB Relay Attack Tool Execution
   - Descrição: Execução Potencial de Ferramenta de Ataque de Relay SMB
   - Python: # Não há um equivalente em uma única linha
   - PowerShell: `Get-WinEvent -LogName Security | Where-Object {$_.Id -eq 4624 -and $_.Message -like '*SMB*'}`

9. QA_RC308_C121_E.R_A_IIS_Suspicious IIS Module Registration
   - Descrição: Registro Suspeito de Módulo IIS
   - Python: # Não há um equivalente em uma única linha
   - PowerShell: `Get-WebConfiguration -Filter '/system.webServer/globalModules/*' | Where-Object {$_.preCondition -like '*suspicious*'}`

10. QA_RC308_C122_E.R_A_WIN_Microsoft IIS Connection Strings Decryption
    - Descrição: Descriptografia de Strings de Conexão do Microsoft IIS
    - Python: # Não há um equivalente em uma única linha
    - PowerShell: `Get-Content -Path 'C:\\path\\to\\web.config' | Select-String -Pattern 'connectionStrings'`

11. QA_RC308_C117_E.R_M_WIN_HackTool - ADCSPwn Execution
    - Descrição: Execução da Ferramenta de Hack - ADCSPwn
    - Python: # Não há um equivalente em uma única linha
    - PowerShell: `Get-Process | Where-Object {$_.Name -eq 'adcspwn'}`

12. QA_RC308_C124_E.R_A_WIN_Request A Single Ticket via PowerShell
    - Descrição: Solicitação de Um Único Ticket via PowerShell
    - Python: # Não há um equivalente em uma única linha
    - PowerShell: `klist | Where-Object {$_ -match 'Ticket Granting Ticket'}`

13. QA_RC308_C125_E.R_M_WIN_Suspicious Kerberos RC4 Ticket Encryption
    - Descrição: Criptografia de Ticket Kerberos RC4 Suspeita
    - Python: # Não há um equivalente em uma única linha
    - PowerShell: `Get-WinEvent -LogName Security | Where-Object {$_.Id -eq 4769 -and $_.Message -match 'RC4'}`

14. QA_RC308_C129_E.R_A_LNX_Communication To Ngrok Tunneling Service
    - Descrição: Comunicação com Serviço de Tunneling Ngrok no Linux
    - Python:

    ```python
    import os

    os.system('ps aux | grep ngrok')
    ```

    - PowerShell: # Não há equivalente para Linux

15. QA_RC308_C133_E.R_A_WIN_Golden Ticket by HackTool
    - Descrição: Golden Ticket Criado por Ferramenta de Hack
    - Python: # Não há um equivalente em uma única linha
    - PowerShell: `Get-WinEvent -LogName Security | Where-Object {$_.Id -eq 4768}`

16. QA_RC308_C135_E.R_A_WIN_Silver Ticket by HackTool
    - Descrição: Silver Ticket Criado por Ferramenta de Hack
    - Python: # Não há um equivalente em uma única linha
    - PowerShell: `Get-WinEvent -LogName Security | Where-Object {$_.Id -eq 4769}`

17. QA_UBA: Possible TGT Forgery - Due
    - Descrição: Possível Falsificação de TGT - Vencido
    - Python: # Não há um equivalente em uma única linha
    - PowerShell: `Get-WinEvent -LogName Security | Where-Object {$_.Id -eq 4769}`

18. QA_RC308_140_E.R_M_UBA_UBA : First Privilege Escalation
    - Descrição: Primeira Escalação de Privilégio
    - Python: # Não há um equivalente em uma única linha
    - PowerShell: `Get-WinEvent -LogName Security | Where-Object {$_.Id -eq 4670}`

19. QA_RC309_C142_L.E.R_M_WIN_Suspicious DC Replication Request
    - Descrição: Solicitação de Replicação DC Suspeita


    - Python: # Não há um equivalente em uma única linha
    - PowerShell: `Get-WinEvent -LogName Security | Where-Object {$_.Id -eq 4662}`

20. QA_RC309_C142_L.E.R_M_WIN_Suspicious DC Replication Request - 2
    - Descrição: Solicitação de Replicação DC Suspeita - 2
    - Python: # Não há um equivalente em uma única linha
    - PowerShell: `Get-WinEvent -LogName Security | Where-Object {$_.Id -eq 4662}`

21. QA_RC309_C144_E.R_M_WIN_Token Impersonation via PowerShell
    - Descrição: Impersonação de Token via PowerShell
    - Python: # Não há um equivalente em uma única linha
    - PowerShell: `Get-WinEvent -LogName Security | Where-Object {$_.Id -eq 4672}`

22. QA_Attempt to Disable Windows Firewall
    - Descrição: Tentativa de Desativar o Firewall do Windows
    - Python:

    ```python
    import os

    os.system('netsh advfirewall set allprofiles state off')
    ```

    - PowerShell: `Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False`

23. QA_Potential Windows Exploit via MSDT
    - Descrição: Exploit Potencial do Windows via MSDT
    - Python: # Não há um equivalente em uma única linha
    - PowerShell: `Get-EventLog -LogName Application | Where-Object {$_.Source -eq 'MSDTC'}`

24. QA_Potential DLL Hijacking
    - Descrição: Hijacking de DLL Potencial
    - Python: # Não há um equivalente em uma única linha
    - PowerShell: `Get-Process | Where-Object {$_.Modules | Where-Object {$_.ModuleName -match 'suspicious.dll'}`

Se precisar de mais alguma coisa, me avise!